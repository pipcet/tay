var HEAP = []; for (var i = 0; i < 1024*1024; i++) HEAP[i] = 0;
HEAP[1024] = 1;
HEAP[1025] = "exit";
HEAP[1029] = 1;
HEAP[1030] = "sp@";
HEAP[1031] = 1024;
HEAP[1033] = 1;
HEAP[1034] = 1;
HEAP[1035] = "sp!";
HEAP[1036] = 1029;
HEAP[1038] = 2;
HEAP[1039] = 1;
HEAP[1040] = "rp@";
HEAP[1041] = 1034;
HEAP[1043] = 3;
HEAP[1044] = 1;
HEAP[1045] = "rp!";
HEAP[1046] = 1039;
HEAP[1048] = 4;
HEAP[1049] = 1;
HEAP[1050] = "dodoes";
HEAP[1051] = 1044;
HEAP[1053] = 5;
HEAP[1054] = 1;
HEAP[1055] = "docol";
HEAP[1056] = 1049;
HEAP[1058] = 6;
HEAP[1059] = 1;
HEAP[1060] = "dovar";
HEAP[1061] = 1054;
HEAP[1063] = 7;
HEAP[1064] = 1;
HEAP[1065] = "docon";
HEAP[1066] = 1059;
HEAP[1068] = 8;
HEAP[1069] = 1;
HEAP[1070] = "dodef";
HEAP[1071] = 1064;
HEAP[1073] = 9;
HEAP[1074] = 1;
HEAP[1075] = "0branch";
HEAP[1076] = 1069;
HEAP[1078] = 10;
HEAP[1079] = 1;
HEAP[1080] = "branch";
HEAP[1081] = 1074;
HEAP[1083] = 11;
HEAP[1084] = 1;
HEAP[1085] = "(literal)";
HEAP[1086] = 1079;
HEAP[1088] = 12;
HEAP[1089] = 1;
HEAP[1090] = "!";
HEAP[1091] = 1084;
HEAP[1093] = 13;
HEAP[1094] = 1;
HEAP[1095] = "@";
HEAP[1096] = 1089;
HEAP[1098] = 14;
HEAP[1099] = 1;
HEAP[1100] = "+";
HEAP[1101] = 1094;
HEAP[1103] = 15;
HEAP[1104] = 1;
HEAP[1105] = "js+";
HEAP[1106] = 1099;
HEAP[1108] = 16;
HEAP[1109] = 1;
HEAP[1110] = "negate";
HEAP[1111] = 1104;
HEAP[1113] = 17;
HEAP[1114] = 1;
HEAP[1115] = "-";
HEAP[1116] = 1109;
HEAP[1118] = 18;
HEAP[1119] = 1;
HEAP[1120] = ">r";
HEAP[1121] = 1114;
HEAP[1123] = 19;
HEAP[1124] = 1;
HEAP[1125] = "r>";
HEAP[1126] = 1119;
HEAP[1128] = 20;
HEAP[1129] = 1;
HEAP[1130] = "2r>";
HEAP[1131] = 1124;
HEAP[1133] = 21;
HEAP[1134] = 1;
HEAP[1135] = "2>r";
HEAP[1136] = 1129;
HEAP[1138] = 22;
HEAP[1139] = 1;
HEAP[1140] = "c!";
HEAP[1141] = 1134;
HEAP[1143] = 23;
HEAP[1144] = 1;
HEAP[1145] = "c@";
HEAP[1146] = 1139;
HEAP[1148] = 24;
HEAP[1149] = 1;
HEAP[1150] = "(loop)";
HEAP[1151] = 1144;
HEAP[1153] = 25;
HEAP[1154] = 1;
HEAP[1155] = "2rdrop";
HEAP[1156] = 1149;
HEAP[1158] = 26;
HEAP[1159] = 1;
HEAP[1160] = "emit";
HEAP[1161] = 1154;
HEAP[1163] = 27;
HEAP[1164] = 1;
HEAP[1165] = "dup";
HEAP[1166] = 1159;
HEAP[1168] = 28;
HEAP[1169] = 1;
HEAP[1170] = "0=";
HEAP[1171] = 1164;
HEAP[1173] = 29;
HEAP[1174] = 1;
HEAP[1175] = "0<>";
HEAP[1176] = 1169;
HEAP[1178] = 30;
HEAP[1179] = 1;
HEAP[1180] = "0<";
HEAP[1181] = 1174;
HEAP[1183] = 31;
HEAP[1184] = 1;
HEAP[1185] = "<";
HEAP[1186] = 1179;
HEAP[1188] = 32;
HEAP[1189] = 1;
HEAP[1190] = "rot";
HEAP[1191] = 1184;
HEAP[1193] = 33;
HEAP[1194] = 1;
HEAP[1195] = "-rot";
HEAP[1196] = 1189;
HEAP[1198] = 34;
HEAP[1199] = 1;
HEAP[1200] = "nip";
HEAP[1201] = 1194;
HEAP[1203] = 35;
HEAP[1204] = 1;
HEAP[1205] = "drop";
HEAP[1206] = 1199;
HEAP[1208] = 36;
HEAP[1209] = 1;
HEAP[1210] = "2dup";
HEAP[1211] = 1204;
HEAP[1213] = 37;
HEAP[1214] = 1;
HEAP[1215] = "?dup";
HEAP[1216] = 1209;
HEAP[1218] = 38;
HEAP[1219] = 1;
HEAP[1220] = "swap";
HEAP[1221] = 1214;
HEAP[1223] = 39;
HEAP[1224] = 1;
HEAP[1225] = "over";
HEAP[1226] = 1219;
HEAP[1228] = 40;
HEAP[1229] = 1;
HEAP[1230] = "invert";
HEAP[1231] = 1224;
HEAP[1233] = 41;
HEAP[1234] = 1;
HEAP[1235] = "xor";
HEAP[1236] = 1229;
HEAP[1238] = 42;
HEAP[1239] = 1;
HEAP[1240] = "or";
HEAP[1241] = 1234;
HEAP[1243] = 43;
HEAP[1244] = 1;
HEAP[1245] = "and";
HEAP[1246] = 1239;
HEAP[1248] = 44;
HEAP[1249] = 1;
HEAP[1250] = "nand";
HEAP[1251] = 1244;
HEAP[1253] = 45;
HEAP[1254] = 1;
HEAP[1255] = "=";
HEAP[1256] = 1249;
HEAP[1258] = 46;
HEAP[1259] = 1;
HEAP[1260] = "<>";
HEAP[1261] = 1254;
HEAP[1263] = 47;
HEAP[1264] = 1;
HEAP[1265] = "1+";
HEAP[1266] = 1259;
HEAP[1268] = 48;
HEAP[1269] = 1;
HEAP[1270] = "2*";
HEAP[1271] = 1264;
HEAP[1273] = 49;
HEAP[1274] = 1;
HEAP[1275] = "*";
HEAP[1276] = 1269;
HEAP[1278] = 50;
HEAP[1279] = 1;
HEAP[1280] = "tuck";
HEAP[1281] = 1274;
HEAP[1283] = 51;
HEAP[1284] = 1;
HEAP[1285] = "bye";
HEAP[1286] = 1279;
HEAP[1288] = 52;
HEAP[1289] = 1;
HEAP[1290] = "close-file";
HEAP[1291] = 1284;
HEAP[1293] = 53;
HEAP[1294] = 1;
HEAP[1295] = "open-file";
HEAP[1296] = 1289;
HEAP[1298] = 54;
HEAP[1299] = 1;
HEAP[1300] = "read-file";
HEAP[1301] = 1294;
HEAP[1303] = 55;
HEAP[1304] = 1;
HEAP[1305] = "js-array";
HEAP[1306] = 1299;
HEAP[1308] = 56;
HEAP[1309] = 1;
HEAP[1310] = "js-in";
HEAP[1311] = 1304;
HEAP[1313] = 57;
HEAP[1314] = 1;
HEAP[1315] = "js-object";
HEAP[1316] = 1309;
HEAP[1318] = 58;
HEAP[1319] = 1;
HEAP[1320] = "$ref";
HEAP[1321] = 1314;
HEAP[1323] = 59;
HEAP[1324] = 1;
HEAP[1325] = "$o";
HEAP[1326] = 1319;
HEAP[1328] = 60;
HEAP[1329] = 1;
HEAP[1330] = "$i";
HEAP[1331] = 1324;
HEAP[1333] = 61;
HEAP[1334] = 1;
HEAP[1335] = "js.";
HEAP[1336] = 1329;
HEAP[1338] = 62;
HEAP[1339] = 1;
HEAP[1340] = "jsexp";
HEAP[1341] = 1334;
HEAP[1343] = 63;
HEAP[1344] = 1;
HEAP[1345] = "$!";
HEAP[1346] = 1339;
HEAP[1348] = 64;
HEAP[1349] = 1;
HEAP[1350] = "$@";
HEAP[1351] = 1344;
HEAP[1353] = 65;
HEAP[1354] = 1;
HEAP[1355] = "$here";
HEAP[1356] = 1349;
HEAP[1358] = 66;
HEAP[1359] = 1;
HEAP[1360] = "$#";
HEAP[1361] = 1354;
HEAP[1363] = 67;
HEAP[1364] = 1;
HEAP[1365] = "$0";
HEAP[1366] = 1359;
HEAP[1368] = 68;
HEAP[1369] = 1;
HEAP[1370] = "$?";
HEAP[1371] = 1364;
HEAP[1373] = 69;
HEAP[1374] = 1;
HEAP[1375] = "$last";
HEAP[1376] = 1369;
HEAP[1378] = 70;
HEAP[1379] = 1;
HEAP[1380] = "$truncate";
HEAP[1381] = 1374;
HEAP[1383] = 71;
HEAP[1384] = 1;
HEAP[1385] = "$#!";
HEAP[1386] = 1379;
HEAP[1388] = 72;
HEAP[1389] = 1;
HEAP[1390] = "$,";
HEAP[1391] = 1384;
HEAP[1393] = 73;
HEAP[1394] = 1;
HEAP[1395] = "$in";
HEAP[1396] = 1389;
HEAP[1398] = 74;
HEAP[1399] = 1;
HEAP[1400] = "$of";
HEAP[1401] = 1394;
HEAP[1403] = 75;
HEAP[1404] = 1;
HEAP[1405] = "$>";
HEAP[1406] = 1399;
HEAP[1408] = 76;
HEAP[1409] = 1;
HEAP[1410] = "<$";
HEAP[1411] = 1404;
HEAP[1413] = 77;
HEAP[1414] = 1;
HEAP[1415] = ">$";
HEAP[1416] = 1409;
HEAP[1418] = 78;
HEAP[1419] = 1;
HEAP[1420] = "$<";
HEAP[1421] = 1414;
HEAP[1423] = 79;
HEAP[1424] = 1;
HEAP[1425] = "&";
HEAP[1426] = 1419;
HEAP[1428] = 80;
HEAP[1429] = 1;
HEAP[1430] = "ref";
HEAP[1431] = 1424;
HEAP[1433] = 81;
HEAP[1434] = 1;
HEAP[1435] = "js\"\"";
HEAP[1436] = 1429;
HEAP[1438] = 82;
HEAP[1439] = 1;
HEAP[1440] = "fth\"\"";
HEAP[1441] = 1434;
HEAP[1443] = 83;
HEAP[1444] = 1;
HEAP[1445] = "js[]";
HEAP[1446] = 1439;
HEAP[1448] = 84;
HEAP[1449] = 1;
HEAP[1450] = "js{}";
HEAP[1451] = 1444;
HEAP[1453] = 85;
HEAP[1454] = 1;
HEAP[1455] = "js()";
HEAP[1456] = 1449;
HEAP[1458] = 86;
HEAP[1459] = 1;
HEAP[1460] = "js{}()";
HEAP[1461] = 1454;
HEAP[1463] = 87;
HEAP[1464] = 1;
HEAP[1465] = "find-own-level";
HEAP[1466] = 1459;
HEAP[1468] = 88;
HEAP[1469] = 1;
HEAP[1470] = "js";
HEAP[1471] = 1464;
HEAP[1473] = 89;
HEAP[1474] = 1;
HEAP[1475] = "js===";
HEAP[1476] = 1469;
HEAP[1478] = 90;
HEAP[1479] = 1;
HEAP[1480] = "noop";
HEAP[1481] = 1474;
HEAP[1483] = 6;
HEAP[1484] = 1024;
HEAP[1485] = 1;
HEAP[1486] = "cell";
HEAP[1487] = 1479;
HEAP[1489] = 6;
HEAP[1490] = 1084;
HEAP[1491] = 1;
HEAP[1492] = 1024;
HEAP[1493] = 1;
HEAP[1494] = "cell+";
HEAP[1495] = 1485;
HEAP[1497] = 6;
HEAP[1498] = 1084;
HEAP[1499] = 1;
HEAP[1500] = 1099;
HEAP[1501] = 1024;
HEAP[1502] = 1;
HEAP[1503] = "temp";
HEAP[1504] = 1493;
HEAP[1506] = 7;
HEAP[1508] = 1;
HEAP[1509] = "2drop";
HEAP[1510] = 1502;
HEAP[1512] = 6;
HEAP[1513] = 1204;
HEAP[1514] = 1204;
HEAP[1515] = 1024;
HEAP[1516] = 1;
HEAP[1517] = "3drop";
HEAP[1518] = 1508;
HEAP[1520] = 6;
HEAP[1521] = 1508;
HEAP[1522] = 1204;
HEAP[1523] = 1024;
HEAP[1524] = 1;
HEAP[1525] = "r@";
HEAP[1526] = 1516;
HEAP[1528] = 6;
HEAP[1529] = 1039;
HEAP[1530] = 1493;
HEAP[1531] = 1094;
HEAP[1532] = 1024;
HEAP[1533] = 1;
HEAP[1534] = "3dup";
HEAP[1535] = 1524;
HEAP[1537] = 6;
HEAP[1538] = 1119;
HEAP[1539] = 1119;
HEAP[1540] = 1524;
HEAP[1541] = 1224;
HEAP[1542] = 1129;
HEAP[1543] = 1224;
HEAP[1544] = 1119;
HEAP[1545] = 1189;
HEAP[1546] = 1219;
HEAP[1547] = 1124;
HEAP[1548] = 1024;
HEAP[1549] = 1;
HEAP[1550] = "(+loop)";
HEAP[1551] = 1533;
HEAP[1553] = 6;
HEAP[1554] = 1124;
HEAP[1555] = 1219;
HEAP[1556] = 1124;
HEAP[1557] = 1099;
HEAP[1558] = 1524;
HEAP[1559] = 1224;
HEAP[1560] = 1119;
HEAP[1561] = 1184;
HEAP[1562] = 1229;
HEAP[1563] = 1219;
HEAP[1564] = 1119;
HEAP[1565] = 1024;
HEAP[1566] = 1;
HEAP[1567] = "unloop";
HEAP[1568] = 1549;
HEAP[1570] = 6;
HEAP[1571] = 1124;
HEAP[1572] = 1129;
HEAP[1573] = 1508;
HEAP[1574] = 1119;
HEAP[1575] = 1024;
HEAP[1576] = 1;
HEAP[1577] = "+!";
HEAP[1578] = 1566;
HEAP[1580] = 6;
HEAP[1581] = 1219;
HEAP[1582] = 1224;
HEAP[1583] = 1094;
HEAP[1584] = 1099;
HEAP[1585] = 1219;
HEAP[1586] = 1089;
HEAP[1587] = 1024;
HEAP[1588] = 1;
HEAP[1589] = "min";
HEAP[1590] = 1576;
HEAP[1592] = 6;
HEAP[1593] = 1209;
HEAP[1594] = 1184;
HEAP[1595] = 1074;
HEAP[1596] = 1600;
HEAP[1597] = 1204;
HEAP[1598] = 1079;
HEAP[1599] = 1601;
HEAP[1600] = 1199;
HEAP[1601] = 1024;
HEAP[1602] = 1;
HEAP[1603] = "bounds";
HEAP[1604] = 1588;
HEAP[1606] = 6;
HEAP[1607] = 1224;
HEAP[1608] = 1099;
HEAP[1609] = 1219;
HEAP[1610] = 1024;
HEAP[1611] = 1;
HEAP[1612] = "count";
HEAP[1613] = 1602;
HEAP[1615] = 6;
HEAP[1616] = 1164;
HEAP[1617] = 1264;
HEAP[1618] = 1219;
HEAP[1619] = 1144;
HEAP[1620] = 1024;
HEAP[1621] = 1;
HEAP[1622] = "aligned";
HEAP[1623] = 1611;
HEAP[1625] = 6;
HEAP[1626] = 1024;
HEAP[1627] = 1;
HEAP[1628] = "(sliteral)";
HEAP[1629] = 1621;
HEAP[1631] = 6;
HEAP[1632] = 1124;
HEAP[1633] = 1164;
HEAP[1634] = 1094;
HEAP[1635] = 1219;
HEAP[1636] = 1493;
HEAP[1637] = 1119;
HEAP[1638] = 1439;
HEAP[1639] = 1024;
HEAP[1640] = 1;
HEAP[1641] = "i";
HEAP[1642] = 1627;
HEAP[1644] = 6;
HEAP[1645] = 1124;
HEAP[1646] = 1524;
HEAP[1647] = 1219;
HEAP[1648] = 1119;
HEAP[1649] = 1024;
HEAP[1650] = 1;
HEAP[1651] = "cr";
HEAP[1652] = 1640;
HEAP[1654] = 6;
HEAP[1655] = 1084;
HEAP[1656] = 10;
HEAP[1657] = 1159;
HEAP[1658] = 1024;
HEAP[1659] = 1;
HEAP[1660] = "type";
HEAP[1661] = 1650;
HEAP[1663] = 6;
HEAP[1664] = 1214;
HEAP[1665] = 1074;
HEAP[1666] = 1678;
HEAP[1667] = 1602;
HEAP[1668] = 1134;
HEAP[1669] = 1640;
HEAP[1670] = 1144;
HEAP[1671] = 1159;
HEAP[1672] = 1149;
HEAP[1673] = 1074;
HEAP[1674] = 1669;
HEAP[1675] = 1154;
HEAP[1676] = 1079;
HEAP[1677] = 1679;
HEAP[1678] = 1204;
HEAP[1679] = 1024;
HEAP[1680] = 1;
HEAP[1681] = "execute";
HEAP[1682] = 1659;
HEAP[1684] = 6;
HEAP[1685] = 1084;
HEAP[1686] = 1688;
HEAP[1687] = 1089;
HEAP[1688] = 1479;
HEAP[1689] = 1024;
HEAP[1690] = 1;
HEAP[1691] = "perform";
HEAP[1692] = 1680;
HEAP[1694] = 6;
HEAP[1695] = 1094;
HEAP[1696] = 1680;
HEAP[1697] = 1024;
HEAP[1698] = 1;
HEAP[1699] = "state";
HEAP[1700] = 1690;
HEAP[1702] = 7;
HEAP[1704] = 1;
HEAP[1705] = "cmove";
HEAP[1706] = 1698;
HEAP[1708] = 6;
HEAP[1709] = 1214;
HEAP[1710] = 1074;
HEAP[1711] = 1724;
HEAP[1712] = 1602;
HEAP[1713] = 1134;
HEAP[1714] = 1611;
HEAP[1715] = 1640;
HEAP[1716] = 1139;
HEAP[1717] = 1149;
HEAP[1718] = 1074;
HEAP[1719] = 1714;
HEAP[1720] = 1154;
HEAP[1721] = 1204;
HEAP[1722] = 1079;
HEAP[1723] = 1725;
HEAP[1724] = 1508;
HEAP[1725] = 1024;
HEAP[1726] = 1;
HEAP[1727] = "cabs";
HEAP[1728] = 1704;
HEAP[1730] = 6;
HEAP[1731] = 1084;
HEAP[1732] = 127;
HEAP[1733] = 1224;
HEAP[1734] = 1184;
HEAP[1735] = 1074;
HEAP[1736] = 1741;
HEAP[1737] = 1084;
HEAP[1738] = 256;
HEAP[1739] = 1219;
HEAP[1740] = 1114;
HEAP[1741] = 1024;
HEAP[1742] = 1;
HEAP[1743] = "latest";
HEAP[1744] = 1726;
HEAP[1746] = 8;
HEAP[1748] = 1;
HEAP[1749] = "latestxt";
HEAP[1750] = 1742;
HEAP[1752] = 8;
HEAP[1754] = 1;
HEAP[1755] = "dp";
HEAP[1756] = 1748;
HEAP[1758] = 7;
HEAP[1760] = 1;
HEAP[1761] = "here";
HEAP[1762] = 1754;
HEAP[1764] = 6;
HEAP[1765] = 1754;
HEAP[1766] = 1094;
HEAP[1767] = 1024;
HEAP[1768] = 1;
HEAP[1769] = "allot";
HEAP[1770] = 1760;
HEAP[1772] = 6;
HEAP[1773] = 1754;
HEAP[1774] = 1576;
HEAP[1775] = 1024;
HEAP[1776] = 1;
HEAP[1777] = "align";
HEAP[1778] = 1768;
HEAP[1780] = 6;
HEAP[1781] = 1754;
HEAP[1782] = 1094;
HEAP[1783] = 1621;
HEAP[1784] = 1754;
HEAP[1785] = 1089;
HEAP[1786] = 1024;
HEAP[1787] = 1;
HEAP[1788] = ",";
HEAP[1789] = 1776;
HEAP[1791] = 6;
HEAP[1792] = 1760;
HEAP[1793] = 1089;
HEAP[1794] = 1084;
HEAP[1795] = 1;
HEAP[1796] = 1768;
HEAP[1797] = 1024;
HEAP[1798] = 1;
HEAP[1799] = "c,";
HEAP[1800] = 1787;
HEAP[1802] = 6;
HEAP[1803] = 1760;
HEAP[1804] = 1139;
HEAP[1805] = 1084;
HEAP[1806] = 1;
HEAP[1807] = 1768;
HEAP[1808] = 1024;
HEAP[1809] = 1;
HEAP[1810] = "move,";
HEAP[1811] = 1798;
HEAP[1813] = 6;
HEAP[1814] = 1760;
HEAP[1815] = 1219;
HEAP[1816] = 1164;
HEAP[1817] = 1768;
HEAP[1818] = 1704;
HEAP[1819] = 1024;
HEAP[1820] = 1;
HEAP[1821] = "\",";
HEAP[1822] = 1809;
HEAP[1824] = 6;
HEAP[1825] = 1809;
HEAP[1826] = 1776;
HEAP[1827] = 1024;
HEAP[1828] = 1;
HEAP[1829] = ">lfa";
HEAP[1830] = 1820;
HEAP[1832] = 6;
HEAP[1833] = 1084;
HEAP[1834] = 2;
HEAP[1835] = 1099;
HEAP[1836] = 1024;
HEAP[1837] = 1;
HEAP[1838] = ">code";
HEAP[1839] = 1828;
HEAP[1841] = 6;
HEAP[1842] = 1084;
HEAP[1843] = 4;
HEAP[1844] = 1099;
HEAP[1845] = 1024;
HEAP[1846] = 1;
HEAP[1847] = ">body";
HEAP[1848] = 1837;
HEAP[1850] = 6;
HEAP[1851] = 1084;
HEAP[1852] = 5;
HEAP[1853] = 1099;
HEAP[1854] = 1024;
HEAP[1855] = 1;
HEAP[1856] = ">nextxt";
HEAP[1857] = 1846;
HEAP[1859] = 6;
HEAP[1860] = 1828;
HEAP[1861] = 1094;
HEAP[1862] = 1024;
HEAP[1863] = 1;
HEAP[1864] = ">does";
HEAP[1865] = 1855;
HEAP[1867] = 6;
HEAP[1868] = 1084;
HEAP[1869] = 3;
HEAP[1870] = 1099;
HEAP[1871] = 1024;
HEAP[1872] = 1;
HEAP[1873] = "code!";
HEAP[1874] = 1863;
HEAP[1876] = 6;
HEAP[1877] = 1748;
HEAP[1878] = 1837;
HEAP[1879] = 1089;
HEAP[1880] = 1024;
HEAP[1881] = 1;
HEAP[1882] = "does!";
HEAP[1883] = 1872;
HEAP[1885] = 6;
HEAP[1886] = 1084;
HEAP[1887] = 5;
HEAP[1888] = 1872;
HEAP[1889] = 1748;
HEAP[1890] = 1863;
HEAP[1891] = 1089;
HEAP[1892] = 1024;
HEAP[1893] = 1;
HEAP[1894] = "does,";
HEAP[1895] = 1881;
HEAP[1897] = 6;
HEAP[1898] = 1204;
HEAP[1899] = 1024;
HEAP[1900] = 1;
HEAP[1901] = "?code,";
HEAP[1902] = 1893;
HEAP[1904] = 6;
HEAP[1905] = 1760;
HEAP[1906] = 1493;
HEAP[1907] = 1787;
HEAP[1908] = 1024;
HEAP[1909] = 1;
HEAP[1910] = "compile,";
HEAP[1911] = 1900;
HEAP[1913] = 6;
HEAP[1914] = 1787;
HEAP[1915] = 1024;
HEAP[1916] = 1;
HEAP[1917] = "current";
HEAP[1918] = 1909;
HEAP[1920] = 7;
HEAP[1922] = 1;
HEAP[1923] = "chain,";
HEAP[1924] = 1916;
HEAP[1926] = 6;
HEAP[1927] = 1164;
HEAP[1928] = 1094;
HEAP[1929] = 1787;
HEAP[1930] = 1089;
HEAP[1931] = 1024;
HEAP[1932] = 1;
HEAP[1933] = "latest!";
HEAP[1934] = 1922;
HEAP[1936] = 6;
HEAP[1937] = 1084;
HEAP[1938] = 1747;
HEAP[1939] = 1089;
HEAP[1940] = 1084;
HEAP[1941] = 1753;
HEAP[1942] = 1089;
HEAP[1943] = 1024;
HEAP[1944] = 1;
HEAP[1945] = "link,";
HEAP[1946] = 1932;
HEAP[1948] = 6;
HEAP[1949] = 1164;
HEAP[1950] = 1932;
HEAP[1951] = 1916;
HEAP[1952] = 1094;
HEAP[1953] = 1846;
HEAP[1954] = 1094;
HEAP[1955] = 1787;
HEAP[1956] = 1024;
HEAP[1957] = 1;
HEAP[1958] = "reveal";
HEAP[1959] = 1944;
HEAP[1961] = 6;
HEAP[1962] = 1742;
HEAP[1963] = 1214;
HEAP[1964] = 1074;
HEAP[1965] = 1970;
HEAP[1966] = 1916;
HEAP[1967] = 1094;
HEAP[1968] = 1846;
HEAP[1969] = 1089;
HEAP[1970] = 1024;
HEAP[1971] = 1;
HEAP[1972] = "cells";
HEAP[1973] = 1957;
HEAP[1975] = 6;
HEAP[1976] = 1024;
HEAP[1977] = 1;
HEAP[1978] = "code,";
HEAP[1979] = 1971;
HEAP[1981] = 6;
HEAP[1982] = 1872;
HEAP[1983] = 1084;
HEAP[1984] = 1;
HEAP[1985] = 1768;
HEAP[1986] = 1024;
HEAP[1987] = 1;
HEAP[1988] = "(does>)";
HEAP[1989] = 1977;
HEAP[1991] = 6;
HEAP[1992] = 1124;
HEAP[1993] = 1881;
HEAP[1994] = 1024;
HEAP[1995] = 1;
HEAP[1996] = "stdin";
HEAP[1997] = 1987;
HEAP[1999] = 8;
HEAP[2001] = 1;
HEAP[2002] = "io-init";
HEAP[2003] = 1995;
HEAP[2005] = 6;
HEAP[2006] = 1024;
HEAP[2007] = 1;
HEAP[2008] = "r/o";
HEAP[2009] = 2001;
HEAP[2011] = 6;
HEAP[2012] = 1627;
HEAP[2013] = "r";
HEAP[2014] = 1204;
HEAP[2015] = 1024;
HEAP[2016] = 1;
HEAP[2017] = "docol,";
HEAP[2018] = 2007;
HEAP[2020] = 6;
HEAP[2021] = 1084;
HEAP[2022] = 6;
HEAP[2023] = 1787;
HEAP[2024] = 1024;
HEAP[2025] = 1;
HEAP[2026] = "dovar,";
HEAP[2027] = 2016;
HEAP[2029] = 6;
HEAP[2030] = 1084;
HEAP[2031] = 7;
HEAP[2032] = 1787;
HEAP[2033] = 1024;
HEAP[2034] = 1;
HEAP[2035] = "docon,";
HEAP[2036] = 2025;
HEAP[2038] = 6;
HEAP[2039] = 1084;
HEAP[2040] = 8;
HEAP[2041] = 1787;
HEAP[2042] = 1024;
HEAP[2043] = 1;
HEAP[2044] = "dodef,";
HEAP[2045] = 2034;
HEAP[2047] = 6;
HEAP[2048] = 1084;
HEAP[2049] = 9;
HEAP[2050] = 1787;
HEAP[2051] = 1024;
HEAP[2052] = 1;
HEAP[2053] = "NAME_LENGTH";
HEAP[2054] = 2043;
HEAP[2056] = 6;
HEAP[2057] = 1084;
HEAP[2058] = 16;
HEAP[2059] = 1024;
HEAP[2060] = 1;
HEAP[2061] = "#name";
HEAP[2062] = 2052;
HEAP[2064] = 6;
HEAP[2065] = 2052;
HEAP[2066] = 1084;
HEAP[2067] = 1;
HEAP[2068] = 1114;
HEAP[2069] = 1024;
HEAP[2070] = 1;
HEAP[2071] = "name,";
HEAP[2072] = 2060;
HEAP[2074] = 6;
HEAP[2075] = 1084;
HEAP[2076] = 1;
HEAP[2077] = 1787;
HEAP[2078] = 1434;
HEAP[2079] = 1787;
HEAP[2080] = 1024;
HEAP[2081] = 1;
HEAP[2082] = "header,";
HEAP[2083] = 2070;
HEAP[2085] = 6;
HEAP[2086] = 1776;
HEAP[2087] = 1760;
HEAP[2088] = 1119;
HEAP[2089] = 2070;
HEAP[2090] = 1124;
HEAP[2091] = 1944;
HEAP[2092] = 1084;
HEAP[2094] = 1787;
HEAP[2095] = 1024;
HEAP[2096] = 1;
HEAP[2097] = "header,,";
HEAP[2098] = 2081;
HEAP[2100] = 6;
HEAP[2101] = 1760;
HEAP[2102] = 1119;
HEAP[2103] = 2070;
HEAP[2104] = 1124;
HEAP[2105] = 1944;
HEAP[2106] = 1084;
HEAP[2108] = 1787;
HEAP[2109] = 1024;
HEAP[2110] = 1;
HEAP[2111] = ">nfa";
HEAP[2112] = 2096;
HEAP[2114] = 6;
HEAP[2115] = 1024;
HEAP[2116] = 1;
HEAP[2117] = ">xt";
HEAP[2118] = 2110;
HEAP[2120] = 6;
HEAP[2121] = 1204;
HEAP[2122] = 1084;
HEAP[2124] = 1024;
HEAP[2125] = 1;
HEAP[2126] = ">name";
HEAP[2127] = 2116;
HEAP[2129] = 6;
HEAP[2130] = 1264;
HEAP[2131] = 1094;
HEAP[2132] = 1439;
HEAP[2133] = 1024;
HEAP[2134] = 1;
HEAP[2135] = "noheader,";
HEAP[2136] = 2125;
HEAP[2138] = 6;
HEAP[2139] = 1627;
HEAP[2141] = 2081;
HEAP[2142] = 1024;
HEAP[2143] = 1;
HEAP[2144] = "sysdir";
HEAP[2145] = 2134;
HEAP[2147] = 6;
HEAP[2148] = 1627;
HEAP[2149] = "/usr/local/share/lbForth/";
HEAP[2150] = 1024;
HEAP[2151] = 1;
HEAP[2152] = "lowercase?";
HEAP[2153] = 2143;
HEAP[2155] = 6;
HEAP[2156] = 1164;
HEAP[2157] = 1084;
HEAP[2158] = 97;
HEAP[2159] = 1184;
HEAP[2160] = 1074;
HEAP[2161] = 2166;
HEAP[2162] = 1204;
HEAP[2163] = 1084;
HEAP[2165] = 1024;
HEAP[2166] = 1084;
HEAP[2167] = 123;
HEAP[2168] = 1184;
HEAP[2169] = 1024;
HEAP[2170] = 1;
HEAP[2171] = "upcase";
HEAP[2172] = 2151;
HEAP[2174] = 6;
HEAP[2175] = 1164;
HEAP[2176] = 2151;
HEAP[2177] = 1074;
HEAP[2178] = 2182;
HEAP[2179] = 1084;
HEAP[2180] = -32;
HEAP[2181] = 1099;
HEAP[2182] = 1024;
HEAP[2183] = 1;
HEAP[2184] = "c<>";
HEAP[2185] = 2170;
HEAP[2187] = 6;
HEAP[2188] = 2170;
HEAP[2189] = 1219;
HEAP[2190] = 2170;
HEAP[2191] = 1259;
HEAP[2192] = 1024;
HEAP[2193] = 1;
HEAP[2194] = "name=";
HEAP[2195] = 2183;
HEAP[2197] = 6;
HEAP[2198] = 1134;
HEAP[2199] = 1524;
HEAP[2200] = 1259;
HEAP[2201] = 1129;
HEAP[2202] = 1189;
HEAP[2203] = 1074;
HEAP[2204] = 2209;
HEAP[2205] = 1516;
HEAP[2206] = 1084;
HEAP[2208] = 1024;
HEAP[2209] = 1602;
HEAP[2210] = 1134;
HEAP[2211] = 1164;
HEAP[2212] = 1144;
HEAP[2213] = 1640;
HEAP[2214] = 1144;
HEAP[2215] = 2183;
HEAP[2216] = 1074;
HEAP[2217] = 2223;
HEAP[2218] = 1204;
HEAP[2219] = 1566;
HEAP[2220] = 1084;
HEAP[2222] = 1024;
HEAP[2223] = 1264;
HEAP[2224] = 1149;
HEAP[2225] = 1074;
HEAP[2226] = 2211;
HEAP[2227] = 1154;
HEAP[2228] = 1204;
HEAP[2229] = 1084;
HEAP[2230] = -1;
HEAP[2231] = 1024;
HEAP[2232] = 1;
HEAP[2233] = "nt=";
HEAP[2234] = 2193;
HEAP[2236] = 6;
HEAP[2237] = 1194;
HEAP[2238] = 1434;
HEAP[2239] = 1219;
HEAP[2240] = 1264;
HEAP[2241] = 1094;
HEAP[2242] = 1474;
HEAP[2243] = 1024;
HEAP[2244] = 1;
HEAP[2245] = "immediate?";
HEAP[2246] = 2232;
HEAP[2248] = 6;
HEAP[2249] = 2110;
HEAP[2250] = 1144;
HEAP[2251] = 1084;
HEAP[2252] = 127;
HEAP[2253] = 1219;
HEAP[2254] = 1184;
HEAP[2255] = 1074;
HEAP[2256] = 2261;
HEAP[2257] = 1084;
HEAP[2258] = 1;
HEAP[2259] = 1079;
HEAP[2260] = 2263;
HEAP[2261] = 1084;
HEAP[2262] = -1;
HEAP[2263] = 1024;
HEAP[2264] = 1;
HEAP[2265] = "traverse-wordlist";
HEAP[2266] = 2244;
HEAP[2268] = 6;
HEAP[2269] = 1119;
HEAP[2270] = 1846;
HEAP[2271] = 1094;
HEAP[2272] = 1164;
HEAP[2273] = 1074;
HEAP[2274] = 2286;
HEAP[2275] = 1524;
HEAP[2276] = 1224;
HEAP[2277] = 1119;
HEAP[2278] = 1680;
HEAP[2279] = 1124;
HEAP[2280] = 1219;
HEAP[2281] = 1074;
HEAP[2282] = 2286;
HEAP[2283] = 1855;
HEAP[2284] = 1079;
HEAP[2285] = 2272;
HEAP[2286] = 1124;
HEAP[2287] = 1508;
HEAP[2288] = 1024;
HEAP[2289] = 1;
HEAP[2290] = "?nt>xt";
HEAP[2291] = 2264;
HEAP[2293] = 6;
HEAP[2294] = 1533;
HEAP[2295] = 2232;
HEAP[2296] = 1074;
HEAP[2297] = 2309;
HEAP[2298] = 1119;
HEAP[2299] = 1516;
HEAP[2300] = 1084;
HEAP[2302] = 1124;
HEAP[2303] = 1164;
HEAP[2304] = 2244;
HEAP[2305] = 1084;
HEAP[2307] = 1079;
HEAP[2308] = 2312;
HEAP[2309] = 1204;
HEAP[2310] = 1084;
HEAP[2311] = -1;
HEAP[2312] = 1024;
HEAP[2313] = 1;
HEAP[2314] = "(find)";
HEAP[2315] = 2289;
HEAP[2317] = 6;
HEAP[2318] = 1134;
HEAP[2319] = 1084;
HEAP[2320] = -1;
HEAP[2321] = 1219;
HEAP[2322] = 1129;
HEAP[2323] = 1084;
HEAP[2324] = 2289;
HEAP[2325] = 2264;
HEAP[2326] = 1189;
HEAP[2327] = 1074;
HEAP[2328] = 2331;
HEAP[2329] = 1084;
HEAP[2331] = 1024;
HEAP[2332] = 1;
HEAP[2333] = "search-wordlist";
HEAP[2334] = 2313;
HEAP[2336] = 6;
HEAP[2337] = 2313;
HEAP[2338] = 1214;
HEAP[2339] = 1169;
HEAP[2340] = 1074;
HEAP[2341] = 2345;
HEAP[2342] = 1508;
HEAP[2343] = 1084;
HEAP[2345] = 1024;
HEAP[2346] = 1;
HEAP[2347] = "abort";
HEAP[2348] = 2332;
HEAP[2350] = 9;
HEAP[2351] = 2346;
HEAP[2352] = 1;
HEAP[2353] = "(abort\")";
HEAP[2354] = 2346;
HEAP[2356] = 9;
HEAP[2357] = 2346;
HEAP[2358] = 1;
HEAP[2359] = "undef";
HEAP[2360] = 2352;
HEAP[2362] = 6;
HEAP[2363] = 1627;
HEAP[2364] = "Undefined: ";
HEAP[2365] = 1659;
HEAP[2366] = 1659;
HEAP[2367] = 1650;
HEAP[2368] = 2346;
HEAP[2369] = 1024;
HEAP[2370] = 1;
HEAP[2371] = "?undef";
HEAP[2372] = 2358;
HEAP[2374] = 6;
HEAP[2375] = 1074;
HEAP[2376] = 2378;
HEAP[2377] = 2358;
HEAP[2378] = 1024;
HEAP[2379] = -1;
HEAP[2380] = "literal";
HEAP[2381] = 2370;
HEAP[2383] = 6;
HEAP[2384] = 1084;
HEAP[2385] = 1084;
HEAP[2386] = 1787;
HEAP[2387] = 1787;
HEAP[2388] = 1024;
HEAP[2389] = 1;
HEAP[2390] = "?literal";
HEAP[2391] = 2379;
HEAP[2393] = 6;
HEAP[2394] = 1698;
HEAP[2395] = 1094;
HEAP[2396] = 1074;
HEAP[2397] = 2399;
HEAP[2398] = 2379;
HEAP[2399] = 1024;
HEAP[2400] = 1;
HEAP[2401] = "number";
HEAP[2402] = 2389;
HEAP[2404] = 9;
HEAP[2405] = 2346;
HEAP[2406] = 1;
HEAP[2407] = "(number)";
HEAP[2408] = 2400;
HEAP[2410] = 6;
HEAP[2411] = 1224;
HEAP[2412] = 1144;
HEAP[2413] = 1084;
HEAP[2414] = 45;
HEAP[2415] = 1254;
HEAP[2416] = 1164;
HEAP[2417] = 1119;
HEAP[2418] = 1074;
HEAP[2419] = 2426;
HEAP[2420] = 1219;
HEAP[2421] = 1264;
HEAP[2422] = 1219;
HEAP[2423] = 1084;
HEAP[2424] = 1;
HEAP[2425] = 1114;
HEAP[2426] = 1084;
HEAP[2428] = 1189;
HEAP[2429] = 1189;
HEAP[2430] = 1164;
HEAP[2431] = 1074;
HEAP[2432] = 2471;
HEAP[2433] = 1224;
HEAP[2434] = 1144;
HEAP[2435] = 1084;
HEAP[2436] = 48;
HEAP[2437] = 1114;
HEAP[2438] = 1084;
HEAP[2439] = -1;
HEAP[2440] = 1224;
HEAP[2441] = 1184;
HEAP[2442] = 1074;
HEAP[2443] = 2470;
HEAP[2444] = 1164;
HEAP[2445] = 1084;
HEAP[2446] = 10;
HEAP[2447] = 1184;
HEAP[2448] = 1074;
HEAP[2449] = 2470;
HEAP[2450] = 1134;
HEAP[2451] = 1264;
HEAP[2452] = 1219;
HEAP[2453] = 1164;
HEAP[2454] = 1164;
HEAP[2455] = 1099;
HEAP[2456] = 1164;
HEAP[2457] = 1099;
HEAP[2458] = 1099;
HEAP[2459] = 1164;
HEAP[2460] = 1099;
HEAP[2461] = 1124;
HEAP[2462] = 1099;
HEAP[2463] = 1219;
HEAP[2464] = 1124;
HEAP[2465] = 1084;
HEAP[2466] = 1;
HEAP[2467] = 1114;
HEAP[2468] = 1079;
HEAP[2469] = 2430;
HEAP[2470] = 1204;
HEAP[2471] = 1214;
HEAP[2472] = 2370;
HEAP[2473] = 1204;
HEAP[2474] = 1124;
HEAP[2475] = 1074;
HEAP[2476] = 2478;
HEAP[2477] = 1109;
HEAP[2478] = 2389;
HEAP[2479] = 1024;
HEAP[2480] = 1;
HEAP[2481] = ">in";
HEAP[2482] = 2406;
HEAP[2484] = 7;
HEAP[2486] = 1;
HEAP[2487] = "input";
HEAP[2488] = 2480;
HEAP[2490] = 7;
HEAP[2492] = 1;
HEAP[2493] = "input@";
HEAP[2494] = 2486;
HEAP[2496] = 6;
HEAP[2497] = 1971;
HEAP[2498] = 2486;
HEAP[2499] = 1094;
HEAP[2500] = 1099;
HEAP[2501] = 1024;
HEAP[2502] = 1;
HEAP[2503] = "'source";
HEAP[2504] = 2492;
HEAP[2506] = 6;
HEAP[2507] = 1084;
HEAP[2509] = 2492;
HEAP[2510] = 1024;
HEAP[2511] = 1;
HEAP[2512] = "#source";
HEAP[2513] = 2502;
HEAP[2515] = 6;
HEAP[2516] = 1084;
HEAP[2517] = 1;
HEAP[2518] = 2492;
HEAP[2519] = 1024;
HEAP[2520] = 1;
HEAP[2521] = "source#";
HEAP[2522] = 2511;
HEAP[2524] = 6;
HEAP[2525] = 1084;
HEAP[2526] = 2;
HEAP[2527] = 2492;
HEAP[2528] = 1024;
HEAP[2529] = 1;
HEAP[2530] = "'refill";
HEAP[2531] = 2520;
HEAP[2533] = 6;
HEAP[2534] = 1084;
HEAP[2535] = 3;
HEAP[2536] = 2492;
HEAP[2537] = 1024;
HEAP[2538] = 1;
HEAP[2539] = "'prompt";
HEAP[2540] = 2529;
HEAP[2542] = 6;
HEAP[2543] = 1084;
HEAP[2544] = 4;
HEAP[2545] = 2492;
HEAP[2546] = 1024;
HEAP[2547] = 1;
HEAP[2548] = "source>";
HEAP[2549] = 2538;
HEAP[2551] = 6;
HEAP[2552] = 1084;
HEAP[2553] = 5;
HEAP[2554] = 2492;
HEAP[2555] = 1024;
HEAP[2556] = 1;
HEAP[2557] = "/input-source";
HEAP[2558] = 2547;
HEAP[2560] = 8;
HEAP[2561] = 6;
HEAP[2562] = 1;
HEAP[2563] = "forth";
HEAP[2564] = 2556;
HEAP[2566] = 7;
HEAP[2569] = 1;
HEAP[2570] = "compiler-words";
HEAP[2571] = 2562;
HEAP[2573] = 7;
HEAP[2576] = 1;
HEAP[2577] = "search-paths";
HEAP[2578] = 2569;
HEAP[2580] = 7;
HEAP[2583] = 1;
HEAP[2584] = "included-files";
HEAP[2585] = 2576;
HEAP[2587] = 7;
HEAP[2590] = 1;
HEAP[2591] = "context";
HEAP[2592] = 2583;
HEAP[2594] = 7;
HEAP[2604] = 1;
HEAP[2605] = "l-dicts";
HEAP[2606] = 2590;
HEAP[2608] = 8;
HEAP[2610] = 1;
HEAP[2611] = "r@+";
HEAP[2612] = 2604;
HEAP[2614] = 6;
HEAP[2615] = 1124;
HEAP[2616] = 1124;
HEAP[2617] = 1164;
HEAP[2618] = 1493;
HEAP[2619] = 1119;
HEAP[2620] = 1094;
HEAP[2621] = 1219;
HEAP[2622] = 1119;
HEAP[2623] = 1024;
HEAP[2624] = 1;
HEAP[2625] = "search-context";
HEAP[2626] = 2610;
HEAP[2628] = 6;
HEAP[2629] = 1119;
HEAP[2630] = 2610;
HEAP[2631] = 1214;
HEAP[2632] = 1074;
HEAP[2633] = 2640;
HEAP[2634] = 2313;
HEAP[2635] = 1214;
HEAP[2636] = 1074;
HEAP[2637] = 2630;
HEAP[2638] = 1079;
HEAP[2639] = 2643;
HEAP[2640] = 1204;
HEAP[2641] = 1084;
HEAP[2643] = 1124;
HEAP[2644] = 1204;
HEAP[2645] = 1024;
HEAP[2646] = 1;
HEAP[2647] = "js-fakey";
HEAP[2648] = 2624;
HEAP[2650] = 6;
HEAP[2651] = 1024;
HEAP[2652] = 1;
HEAP[2653] = "find-name";
HEAP[2654] = 2646;
HEAP[2656] = 6;
HEAP[2657] = 2604;
HEAP[2658] = 1354;
HEAP[2659] = 1074;
HEAP[2660] = 2677;
HEAP[2661] = 1209;
HEAP[2662] = 1434;
HEAP[2663] = 2604;
HEAP[2664] = 1369;
HEAP[2665] = 1219;
HEAP[2666] = 1309;
HEAP[2667] = 1074;
HEAP[2668] = 2677;
HEAP[2669] = 1434;
HEAP[2670] = 2604;
HEAP[2671] = 1369;
HEAP[2672] = 1219;
HEAP[2673] = 1349;
HEAP[2674] = 1084;
HEAP[2675] = -1;
HEAP[2676] = 1024;
HEAP[2677] = 1219;
HEAP[2678] = 1224;
HEAP[2679] = 2590;
HEAP[2680] = 2624;
HEAP[2681] = 1214;
HEAP[2682] = 1074;
HEAP[2683] = 2688;
HEAP[2684] = 1189;
HEAP[2685] = 1204;
HEAP[2686] = 1079;
HEAP[2687] = 2691;
HEAP[2688] = 1219;
HEAP[2689] = 1084;
HEAP[2691] = 1024;
HEAP[2692] = 1;
HEAP[2693] = "source";
HEAP[2694] = 2652;
HEAP[2696] = 6;
HEAP[2697] = 2502;
HEAP[2698] = 1094;
HEAP[2699] = 2511;
HEAP[2700] = 1094;
HEAP[2701] = 1024;
HEAP[2702] = 1;
HEAP[2703] = "source?";
HEAP[2704] = 2692;
HEAP[2706] = 6;
HEAP[2707] = 2480;
HEAP[2708] = 1094;
HEAP[2709] = 2692;
HEAP[2710] = 1199;
HEAP[2711] = 1184;
HEAP[2712] = 1024;
HEAP[2713] = 1;
HEAP[2714] = "<source";
HEAP[2715] = 2702;
HEAP[2717] = 6;
HEAP[2718] = 2692;
HEAP[2719] = 2480;
HEAP[2720] = 1094;
HEAP[2721] = 1164;
HEAP[2722] = 1189;
HEAP[2723] = 1254;
HEAP[2724] = 1074;
HEAP[2725] = 2731;
HEAP[2726] = 1508;
HEAP[2727] = 1084;
HEAP[2728] = -1;
HEAP[2729] = 1079;
HEAP[2730] = 2737;
HEAP[2731] = 1099;
HEAP[2732] = 1144;
HEAP[2733] = 1084;
HEAP[2734] = 1;
HEAP[2735] = 2480;
HEAP[2736] = 1576;
HEAP[2737] = 1024;
HEAP[2738] = 1;
HEAP[2739] = "blank?";
HEAP[2740] = 2713;
HEAP[2742] = 6;
HEAP[2743] = 1084;
HEAP[2744] = 33;
HEAP[2745] = 1184;
HEAP[2746] = 1024;
HEAP[2747] = 1;
HEAP[2748] = "skip";
HEAP[2749] = 2738;
HEAP[2751] = 6;
HEAP[2752] = 2702;
HEAP[2753] = 1074;
HEAP[2754] = 2764;
HEAP[2755] = 2713;
HEAP[2756] = 2738;
HEAP[2757] = 1169;
HEAP[2758] = 1074;
HEAP[2759] = 2752;
HEAP[2760] = 1084;
HEAP[2761] = -1;
HEAP[2762] = 2480;
HEAP[2763] = 1576;
HEAP[2764] = 1024;
HEAP[2765] = 1;
HEAP[2766] = "parse-name";
HEAP[2767] = 2747;
HEAP[2769] = 6;
HEAP[2770] = 2747;
HEAP[2771] = 2692;
HEAP[2772] = 1204;
HEAP[2773] = 2480;
HEAP[2774] = 1094;
HEAP[2775] = 1099;
HEAP[2776] = 1084;
HEAP[2778] = 2702;
HEAP[2779] = 1074;
HEAP[2780] = 2789;
HEAP[2781] = 1264;
HEAP[2782] = 2713;
HEAP[2783] = 2738;
HEAP[2784] = 1074;
HEAP[2785] = 2778;
HEAP[2786] = 1084;
HEAP[2787] = 1;
HEAP[2788] = 1114;
HEAP[2789] = 1024;
HEAP[2790] = 1;
HEAP[2791] = "(previous)";
HEAP[2792] = 2765;
HEAP[2794] = 6;
HEAP[2795] = 1084;
HEAP[2796] = 2562;
HEAP[2797] = 2590;
HEAP[2798] = 1089;
HEAP[2799] = 1024;
HEAP[2800] = 1;
HEAP[2801] = "also";
HEAP[2802] = 2790;
HEAP[2804] = 9;
HEAP[2805] = 2346;
HEAP[2806] = 1;
HEAP[2807] = "previous";
HEAP[2808] = 2800;
HEAP[2810] = 9;
HEAP[2811] = 2346;
HEAP[2812] = 1;
HEAP[2813] = "catch";
HEAP[2814] = 2806;
HEAP[2816] = 9;
HEAP[2817] = 2346;
HEAP[2818] = 1;
HEAP[2819] = "interpreters";
HEAP[2820] = 2812;
HEAP[2822] = 7;
HEAP[2823] = 1680;
HEAP[2824] = 2400;
HEAP[2825] = 1680;
HEAP[2826] = 1;
HEAP[2827] = "?exception";
HEAP[2828] = 2818;
HEAP[2830] = 6;
HEAP[2831] = 1074;
HEAP[2832] = 2838;
HEAP[2833] = 1650;
HEAP[2834] = 1627;
HEAP[2835] = "Exception!";
HEAP[2836] = 1659;
HEAP[2837] = 1650;
HEAP[2838] = 1024;
HEAP[2839] = 1;
HEAP[2840] = "interpret-xt";
HEAP[2841] = 2826;
HEAP[2843] = 6;
HEAP[2844] = 1264;
HEAP[2845] = 1971;
HEAP[2846] = 2818;
HEAP[2847] = 1099;
HEAP[2848] = 1094;
HEAP[2849] = 2812;
HEAP[2850] = 2826;
HEAP[2851] = 1024;
HEAP[2852] = -1;
HEAP[2853] = "[";
HEAP[2854] = 2839;
HEAP[2856] = 6;
HEAP[2857] = 1084;
HEAP[2859] = 1698;
HEAP[2860] = 1089;
HEAP[2861] = 1084;
HEAP[2862] = 1680;
HEAP[2863] = 2818;
HEAP[2864] = 1089;
HEAP[2865] = 2806;
HEAP[2866] = 1024;
HEAP[2867] = 1;
HEAP[2868] = "]";
HEAP[2869] = 2852;
HEAP[2871] = 6;
HEAP[2872] = 1084;
HEAP[2873] = 1;
HEAP[2874] = 1698;
HEAP[2875] = 1089;
HEAP[2876] = 1084;
HEAP[2877] = 1909;
HEAP[2878] = 2818;
HEAP[2879] = 1089;
HEAP[2880] = 2800;
HEAP[2881] = 1084;
HEAP[2882] = 2569;
HEAP[2883] = 2590;
HEAP[2884] = 1089;
HEAP[2885] = 1024;
HEAP[2886] = 1;
HEAP[2887] = "csp";
HEAP[2888] = 2867;
HEAP[2890] = 7;
HEAP[2892] = 1;
HEAP[2893] = ".latest";
HEAP[2894] = 2886;
HEAP[2896] = 6;
HEAP[2897] = 1748;
HEAP[2898] = 2125;
HEAP[2899] = 1659;
HEAP[2900] = 1024;
HEAP[2901] = 1;
HEAP[2902] = "?bad";
HEAP[2903] = 2892;
HEAP[2905] = 6;
HEAP[2906] = 1189;
HEAP[2907] = 1074;
HEAP[2908] = 2916;
HEAP[2909] = 1659;
HEAP[2910] = 1627;
HEAP[2911] = " definition: ";
HEAP[2912] = 1659;
HEAP[2913] = 2892;
HEAP[2914] = 1650;
HEAP[2915] = 2346;
HEAP[2916] = 1508;
HEAP[2917] = 1024;
HEAP[2918] = 1;
HEAP[2919] = "!csp";
HEAP[2920] = 2901;
HEAP[2922] = 6;
HEAP[2923] = 2886;
HEAP[2924] = 1094;
HEAP[2925] = 1627;
HEAP[2926] = "Nested";
HEAP[2927] = 2901;
HEAP[2928] = 1029;
HEAP[2929] = 2886;
HEAP[2930] = 1089;
HEAP[2931] = 1024;
HEAP[2932] = 1;
HEAP[2933] = "?csp";
HEAP[2934] = 2918;
HEAP[2936] = 6;
HEAP[2937] = 1029;
HEAP[2938] = 2886;
HEAP[2939] = 1094;
HEAP[2940] = 1259;
HEAP[2941] = 1627;
HEAP[2942] = "Unbalanced";
HEAP[2943] = 2901;
HEAP[2944] = 1084;
HEAP[2946] = 2886;
HEAP[2947] = 1089;
HEAP[2948] = 1024;
HEAP[2949] = -1;
HEAP[2950] = ";";
HEAP[2951] = 2932;
HEAP[2953] = 6;
HEAP[2954] = 1957;
HEAP[2955] = 1084;
HEAP[2956] = 1024;
HEAP[2957] = 1787;
HEAP[2958] = 2852;
HEAP[2959] = 1084;
HEAP[2961] = 2886;
HEAP[2962] = 1089;
HEAP[2963] = 1024;
HEAP[2964] = 1;
HEAP[2965] = "refill";
HEAP[2966] = 2949;
HEAP[2968] = 6;
HEAP[2969] = 1084;
HEAP[2971] = 2480;
HEAP[2972] = 1089;
HEAP[2973] = 1084;
HEAP[2975] = 2511;
HEAP[2976] = 1089;
HEAP[2977] = 2529;
HEAP[2978] = 1690;
HEAP[2979] = 1024;
HEAP[2980] = 1;
HEAP[2981] = "?prompt";
HEAP[2982] = 2964;
HEAP[2984] = 6;
HEAP[2985] = 2538;
HEAP[2986] = 1690;
HEAP[2987] = 1024;
HEAP[2988] = 1;
HEAP[2989] = "source-id";
HEAP[2990] = 2980;
HEAP[2992] = 6;
HEAP[2993] = 2520;
HEAP[2994] = 1094;
HEAP[2995] = 1024;
HEAP[2996] = 1;
HEAP[2997] = "/file";
HEAP[2998] = 2988;
HEAP[3000] = 8;
HEAP[3001] = 256;
HEAP[3002] = 1;
HEAP[3003] = "file-refill";
HEAP[3004] = 2996;
HEAP[3006] = 6;
HEAP[3007] = 2502;
HEAP[3008] = 1094;
HEAP[3009] = 1084;
HEAP[3010] = 256;
HEAP[3011] = 1602;
HEAP[3012] = 1134;
HEAP[3013] = 1640;
HEAP[3014] = 1084;
HEAP[3015] = 1;
HEAP[3016] = 2988;
HEAP[3017] = 1299;
HEAP[3018] = 1074;
HEAP[3019] = 3024;
HEAP[3020] = 1084;
HEAP[3022] = 1566;
HEAP[3023] = 1024;
HEAP[3024] = 1169;
HEAP[3025] = 1074;
HEAP[3026] = 3031;
HEAP[3027] = 2692;
HEAP[3028] = 1199;
HEAP[3029] = 1566;
HEAP[3030] = 1024;
HEAP[3031] = 1640;
HEAP[3032] = 1144;
HEAP[3033] = 1084;
HEAP[3034] = 10;
HEAP[3035] = 1254;
HEAP[3036] = 1074;
HEAP[3037] = 3040;
HEAP[3038] = 1079;
HEAP[3039] = 3047;
HEAP[3040] = 1084;
HEAP[3041] = 1;
HEAP[3042] = 2511;
HEAP[3043] = 1576;
HEAP[3044] = 1149;
HEAP[3045] = 1074;
HEAP[3046] = 3013;
HEAP[3047] = 1154;
HEAP[3048] = 1084;
HEAP[3049] = -1;
HEAP[3050] = 1024;
HEAP[3051] = 1;
HEAP[3052] = "file-source";
HEAP[3053] = 3002;
HEAP[3055] = 8;
HEAP[3057] = 1;
HEAP[3058] = "save-input";
HEAP[3059] = 3051;
HEAP[3061] = 6;
HEAP[3062] = 2480;
HEAP[3063] = 1094;
HEAP[3064] = 2486;
HEAP[3065] = 1094;
HEAP[3066] = 1084;
HEAP[3067] = 2;
HEAP[3068] = 1024;
HEAP[3069] = 1;
HEAP[3070] = "restore-input";
HEAP[3071] = 3057;
HEAP[3073] = 6;
HEAP[3074] = 1204;
HEAP[3075] = 2486;
HEAP[3076] = 1089;
HEAP[3077] = 2480;
HEAP[3078] = 1089;
HEAP[3079] = 1084;
HEAP[3081] = 1024;
HEAP[3082] = 1;
HEAP[3083] = "backtrace";
HEAP[3084] = 3069;
HEAP[3086] = 9;
HEAP[3087] = 2346;
HEAP[3088] = 1;
HEAP[3089] = "sigint";
HEAP[3090] = 3082;
HEAP[3092] = 6;
HEAP[3093] = 1650;
HEAP[3094] = 3082;
HEAP[3095] = 2346;
HEAP[3096] = 1024;
HEAP[3097] = 1;
HEAP[3098] = "sp0";
HEAP[3099] = 3088;
HEAP[3101] = 8;
HEAP[3103] = 1;
HEAP[3104] = "rp0";
HEAP[3105] = 3097;
HEAP[3107] = 8;
HEAP[3109] = 1;
HEAP[3110] = "dp0";
HEAP[3111] = 3103;
HEAP[3113] = 8;
HEAP[3115] = 1;
HEAP[3116] = "limit";
HEAP[3117] = 3109;
HEAP[3119] = 7;
HEAP[3121] = 1;
HEAP[3122] = "image0";
HEAP[3123] = 3115;
HEAP[3125] = 8;
HEAP[3127] = 1;
HEAP[3128] = "latest0";
HEAP[3129] = 3121;
HEAP[3131] = 8;
HEAP[3133] = 1;
HEAP[3134] = "parsed";
HEAP[3135] = 3127;
HEAP[3137] = 9;
HEAP[3138] = 2346;
HEAP[3139] = 1;
HEAP[3140] = "(parsed)";
HEAP[3141] = 3133;
HEAP[3143] = 6;
HEAP[3144] = 2652;
HEAP[3145] = 2839;
HEAP[3146] = 1024;
HEAP[3147] = 1;
HEAP[3148] = "?stack";
HEAP[3149] = 3139;
HEAP[3151] = 6;
HEAP[3152] = 3097;
HEAP[3153] = 1029;
HEAP[3154] = 1493;
HEAP[3155] = 1184;
HEAP[3156] = 1074;
HEAP[3157] = 3164;
HEAP[3158] = 1627;
HEAP[3159] = "Stack underflow";
HEAP[3160] = 1650;
HEAP[3161] = 1659;
HEAP[3162] = 1650;
HEAP[3163] = 2346;
HEAP[3164] = 1024;
HEAP[3165] = 1;
HEAP[3166] = "interpret";
HEAP[3167] = 3147;
HEAP[3169] = 6;
HEAP[3170] = 2765;
HEAP[3171] = 1164;
HEAP[3172] = 1074;
HEAP[3173] = 3178;
HEAP[3174] = 3133;
HEAP[3175] = 3147;
HEAP[3176] = 1079;
HEAP[3177] = 3170;
HEAP[3178] = 1508;
HEAP[3179] = 1024;
HEAP[3180] = 1;
HEAP[3181] = "interpreting";
HEAP[3182] = 3165;
HEAP[3184] = 6;
HEAP[3185] = 2964;
HEAP[3186] = 1074;
HEAP[3187] = 3192;
HEAP[3188] = 3165;
HEAP[3189] = 2980;
HEAP[3190] = 1079;
HEAP[3191] = 3185;
HEAP[3192] = 1024;
HEAP[3193] = 1;
HEAP[3194] = "0source";
HEAP[3195] = 3180;
HEAP[3197] = 6;
HEAP[3198] = 2538;
HEAP[3199] = 1089;
HEAP[3200] = 2529;
HEAP[3201] = 1089;
HEAP[3202] = 2520;
HEAP[3203] = 1089;
HEAP[3204] = 2502;
HEAP[3205] = 1089;
HEAP[3206] = 1084;
HEAP[3208] = 2547;
HEAP[3209] = 1089;
HEAP[3210] = 1024;
HEAP[3211] = 1;
HEAP[3212] = "source,";
HEAP[3213] = 3193;
HEAP[3215] = 6;
HEAP[3216] = 2486;
HEAP[3217] = 1094;
HEAP[3218] = 1119;
HEAP[3219] = 1760;
HEAP[3220] = 2486;
HEAP[3221] = 1089;
HEAP[3222] = 2556;
HEAP[3223] = 1768;
HEAP[3224] = 3193;
HEAP[3225] = 1124;
HEAP[3226] = 2486;
HEAP[3227] = 1089;
HEAP[3228] = 1024;
HEAP[3229] = 1;
HEAP[3230] = "file,";
HEAP[3231] = 3211;
HEAP[3233] = 6;
HEAP[3234] = 1084;
HEAP[3236] = 1084;
HEAP[3238] = 1084;
HEAP[3239] = 3002;
HEAP[3240] = 1084;
HEAP[3241] = 1479;
HEAP[3242] = 3211;
HEAP[3243] = 2996;
HEAP[3244] = 1768;
HEAP[3245] = 1024;
HEAP[3246] = 1;
HEAP[3247] = "+file";
HEAP[3248] = 3229;
HEAP[3250] = 6;
HEAP[3251] = 1760;
HEAP[3252] = 2547;
HEAP[3253] = 1089;
HEAP[3254] = 3229;
HEAP[3255] = 1024;
HEAP[3256] = 1;
HEAP[3257] = "file>";
HEAP[3258] = 3246;
HEAP[3260] = 6;
HEAP[3261] = 2547;
HEAP[3262] = 1094;
HEAP[3263] = 1214;
HEAP[3264] = 1074;
HEAP[3265] = 3270;
HEAP[3266] = 2486;
HEAP[3267] = 1089;
HEAP[3268] = 1079;
HEAP[3269] = 3271;
HEAP[3270] = 3246;
HEAP[3271] = 1024;
HEAP[3272] = 1;
HEAP[3273] = "alloc-file";
HEAP[3274] = 3256;
HEAP[3276] = 6;
HEAP[3277] = 3051;
HEAP[3278] = 2486;
HEAP[3279] = 1089;
HEAP[3280] = 2502;
HEAP[3281] = 1094;
HEAP[3282] = 1074;
HEAP[3283] = 3287;
HEAP[3284] = 3256;
HEAP[3285] = 1079;
HEAP[3286] = 3280;
HEAP[3287] = 1024;
HEAP[3288] = 1;
HEAP[3289] = "file-input";
HEAP[3290] = 3272;
HEAP[3292] = 6;
HEAP[3293] = 3272;
HEAP[3294] = 2520;
HEAP[3295] = 1089;
HEAP[3296] = 1084;
HEAP[3297] = 6;
HEAP[3298] = 2492;
HEAP[3299] = 2502;
HEAP[3300] = 1089;
HEAP[3301] = 1024;
HEAP[3302] = 1;
HEAP[3303] = "include-file";
HEAP[3304] = 3288;
HEAP[3306] = 6;
HEAP[3307] = 3057;
HEAP[3308] = 1204;
HEAP[3309] = 1134;
HEAP[3310] = 3288;
HEAP[3311] = 3180;
HEAP[3312] = 2988;
HEAP[3313] = 1289;
HEAP[3314] = 1204;
HEAP[3315] = 1084;
HEAP[3317] = 2502;
HEAP[3318] = 1089;
HEAP[3319] = 1129;
HEAP[3320] = 1084;
HEAP[3321] = 2;
HEAP[3322] = 3069;
HEAP[3323] = 1074;
HEAP[3324] = 3331;
HEAP[3325] = 1627;
HEAP[3326] = "Bad restore-input";
HEAP[3327] = 1650;
HEAP[3328] = 1659;
HEAP[3329] = 1650;
HEAP[3330] = 2346;
HEAP[3331] = 1024;
HEAP[3332] = 1;
HEAP[3333] = "+string";
HEAP[3334] = 3302;
HEAP[3336] = 6;
HEAP[3337] = 1209;
HEAP[3338] = 1134;
HEAP[3339] = 1099;
HEAP[3340] = 1224;
HEAP[3341] = 1119;
HEAP[3342] = 1219;
HEAP[3343] = 1704;
HEAP[3344] = 1124;
HEAP[3345] = 1129;
HEAP[3346] = 1189;
HEAP[3347] = 1099;
HEAP[3348] = 1024;
HEAP[3349] = 1;
HEAP[3350] = "pathname";
HEAP[3351] = 3332;
HEAP[3353] = 6;
HEAP[3354] = 1119;
HEAP[3355] = 1209;
HEAP[3356] = 1124;
HEAP[3357] = 2125;
HEAP[3358] = 1760;
HEAP[3359] = 1084;
HEAP[3361] = 3332;
HEAP[3362] = 3332;
HEAP[3363] = 1024;
HEAP[3364] = 1;
HEAP[3365] = "?include";
HEAP[3366] = 3349;
HEAP[3368] = 6;
HEAP[3369] = 1074;
HEAP[3370] = 3376;
HEAP[3371] = 1204;
HEAP[3372] = 1084;
HEAP[3373] = 1;
HEAP[3374] = 1079;
HEAP[3375] = 3384;
HEAP[3376] = 1119;
HEAP[3377] = 1508;
HEAP[3378] = 1124;
HEAP[3379] = 3302;
HEAP[3380] = 1084;
HEAP[3382] = 1084;
HEAP[3384] = 1024;
HEAP[3385] = 1;
HEAP[3386] = "?open";
HEAP[3387] = 3364;
HEAP[3389] = 6;
HEAP[3390] = 3349;
HEAP[3391] = 2007;
HEAP[3392] = 1294;
HEAP[3393] = 3364;
HEAP[3394] = 1024;
HEAP[3395] = 1;
HEAP[3396] = "?error";
HEAP[3397] = 3385;
HEAP[3399] = 6;
HEAP[3400] = 1074;
HEAP[3401] = 3408;
HEAP[3402] = 1627;
HEAP[3403] = "File not found";
HEAP[3404] = 1650;
HEAP[3405] = 1659;
HEAP[3406] = 1650;
HEAP[3407] = 2346;
HEAP[3408] = 1024;
HEAP[3409] = 1;
HEAP[3410] = "search-file";
HEAP[3411] = 3395;
HEAP[3413] = 6;
HEAP[3414] = 1084;
HEAP[3415] = 2576;
HEAP[3416] = 1084;
HEAP[3417] = 3385;
HEAP[3418] = 2264;
HEAP[3419] = 3395;
HEAP[3420] = 1024;
HEAP[3421] = 1;
HEAP[3422] = ">current";
HEAP[3423] = 3409;
HEAP[3425] = 6;
HEAP[3426] = 1916;
HEAP[3427] = 1094;
HEAP[3428] = 1124;
HEAP[3429] = 1134;
HEAP[3430] = 1916;
HEAP[3431] = 1089;
HEAP[3432] = 1024;
HEAP[3433] = 1;
HEAP[3434] = "current>";
HEAP[3435] = 3421;
HEAP[3437] = 6;
HEAP[3438] = 1124;
HEAP[3439] = 1124;
HEAP[3440] = 1916;
HEAP[3441] = 1089;
HEAP[3442] = 1119;
HEAP[3443] = 1024;
HEAP[3444] = 1;
HEAP[3445] = "+name";
HEAP[3446] = 3433;
HEAP[3448] = 6;
HEAP[3449] = 3421;
HEAP[3450] = 2081;
HEAP[3451] = 1084;
HEAP[3453] = 1787;
HEAP[3454] = 1957;
HEAP[3455] = 3433;
HEAP[3456] = 1024;
HEAP[3457] = 1;
HEAP[3458] = "remember-file";
HEAP[3459] = 3444;
HEAP[3461] = 6;
HEAP[3462] = 1084;
HEAP[3463] = 2583;
HEAP[3464] = 3444;
HEAP[3465] = 1024;
HEAP[3466] = 1;
HEAP[3467] = "included";
HEAP[3468] = 3457;
HEAP[3470] = 6;
HEAP[3471] = 1209;
HEAP[3472] = 3457;
HEAP[3473] = 3409;
HEAP[3474] = 1024;
HEAP[3475] = 1;
HEAP[3476] = "searched";
HEAP[3477] = 3466;
HEAP[3479] = 6;
HEAP[3480] = 1084;
HEAP[3481] = 2576;
HEAP[3482] = 3444;
HEAP[3483] = 1024;
HEAP[3484] = 1;
HEAP[3485] = "dummy-catch";
HEAP[3486] = 3475;
HEAP[3488] = 6;
HEAP[3489] = 1680;
HEAP[3490] = 1084;
HEAP[3492] = 1024;
HEAP[3493] = 1;
HEAP[3494] = "quit";
HEAP[3495] = 3484;
HEAP[3497] = 9;
HEAP[3498] = 2346;
HEAP[3499] = 1;
HEAP[3500] = "warm";
HEAP[3501] = 3493;
HEAP[3503] = 6;
HEAP[3504] = 2001;
HEAP[3505] = 1627;
HEAP[3506] = "lbForth";
HEAP[3507] = 1659;
HEAP[3508] = 1650;
HEAP[3509] = 3109;
HEAP[3510] = 1754;
HEAP[3511] = 1089;
HEAP[3512] = 1084;
HEAP[3513] = 1479;
HEAP[3514] = 1164;
HEAP[3515] = 1084;
HEAP[3516] = 3087;
HEAP[3517] = 1089;
HEAP[3518] = 1084;
HEAP[3519] = 2805;
HEAP[3520] = 1089;
HEAP[3521] = 1084;
HEAP[3522] = 3484;
HEAP[3523] = 1084;
HEAP[3524] = 2817;
HEAP[3525] = 1089;
HEAP[3526] = 1084;
HEAP[3527] = 2406;
HEAP[3528] = 1084;
HEAP[3529] = 2405;
HEAP[3530] = 1089;
HEAP[3531] = 1084;
HEAP[3532] = 3139;
HEAP[3533] = 1084;
HEAP[3534] = 3138;
HEAP[3535] = 1089;
HEAP[3536] = 1084;
HEAP[3537] = 2790;
HEAP[3538] = 1084;
HEAP[3539] = 2811;
HEAP[3540] = 1089;
HEAP[3541] = 3127;
HEAP[3542] = 1164;
HEAP[3543] = 1084;
HEAP[3544] = 1753;
HEAP[3545] = 1089;
HEAP[3546] = 2562;
HEAP[3547] = 1089;
HEAP[3548] = 1084;
HEAP[3549] = 2562;
HEAP[3550] = 1916;
HEAP[3551] = 1089;
HEAP[3552] = 1760;
HEAP[3553] = 1084;
HEAP[3554] = 3056;
HEAP[3555] = 1089;
HEAP[3556] = 3229;
HEAP[3557] = 1084;
HEAP[3559] = 2562;
HEAP[3560] = 1493;
HEAP[3561] = 1089;
HEAP[3562] = 1084;
HEAP[3564] = 2569;
HEAP[3565] = 1089;
HEAP[3566] = 1084;
HEAP[3567] = 2562;
HEAP[3568] = 2569;
HEAP[3569] = 1493;
HEAP[3570] = 1089;
HEAP[3571] = 1084;
HEAP[3573] = 2576;
HEAP[3574] = 1089;
HEAP[3575] = 1084;
HEAP[3576] = 2569;
HEAP[3577] = 2583;
HEAP[3578] = 1493;
HEAP[3579] = 1089;
HEAP[3580] = 1084;
HEAP[3582] = 2583;
HEAP[3583] = 1089;
HEAP[3584] = 1084;
HEAP[3585] = 2576;
HEAP[3586] = 2583;
HEAP[3587] = 1493;
HEAP[3588] = 1089;
HEAP[3589] = 1084;
HEAP[3590] = 2562;
HEAP[3591] = 1164;
HEAP[3592] = 2590;
HEAP[3593] = 1089;
HEAP[3594] = 2590;
HEAP[3595] = 1493;
HEAP[3596] = 1089;
HEAP[3597] = 1084;
HEAP[3599] = 2590;
HEAP[3600] = 1084;
HEAP[3601] = 2;
HEAP[3602] = 1971;
HEAP[3603] = 1099;
HEAP[3604] = 1089;
HEAP[3605] = 1627;
HEAP[3606] = "src/";
HEAP[3607] = 3475;
HEAP[3608] = 2143;
HEAP[3609] = 3475;
HEAP[3610] = 1627;
HEAP[3612] = 3475;
HEAP[3613] = 2852;
HEAP[3614] = 1627;
HEAP[3615] = "load-tay.fth";
HEAP[3616] = 3466;
HEAP[3617] = 1627;
HEAP[3618] = "ok";
HEAP[3619] = 1659;
HEAP[3620] = 1650;
HEAP[3621] = 3493;
HEAP[3622] = 1024;
HEAP[3623] = 1;
HEAP[3624] = "turnkey";
HEAP[3625] = 3499;
HEAP[3627] = 9;
HEAP[3628] = 3499;
"use strict";

function MainScope()
{
    Array.call(this);
    for (var i = 0; i < 1024*1024; i++) this[i] = 0;
}

MainScope.prototype = Object.create(Array.prototype);

function Reference(o, i)
{
    this.o = o;
    this.i = i;
}

Reference.prototype.get = function ()
{
    return this.o[this.i];
};

Reference.prototype.set = function (x)
{
    this.o[this.i] = x;
};

Reference.prototype.add = function (n)
{
    return new Reference(this.o, this.i + n);
};

Reference.prototype.toString = function ()
{
    return "{ " + "X" + ":" + this.i + "}";
};

var global = this;
var DICT = new Array();


var params = {
    memsize: 1024 * 1024,
    fsoff: 768 * 1024,
    dictoff: 16 * 1024,
    sp0: 763 * 1024,
    rp0: 767 * 1024,
};

var read_file_async;
var read_line;
var bye;
var gInputLines = [];
var resume_string = undefined;
var put_string;

function forth_input(str)
{
    str = str.replace(/\n$/, "");
    gInputLines.push(str);
    resume("//line");
}

if (typeof(os) !== "undefined") {
    /* SpiderMonkey shell */

    read_file_async = function (path, cb) {
        try {
            cb(os.file.readFile(path, "utf-8"));
        } catch (e) {
            cb();
        }
    };
    read_line = readline;
    if (typeof console === "undefined") {
        this.console = {};
        this.console.log = print;
    }
    bye = function () { quit(0); };
    put_string = this.console.log;
} else if (typeof(require) !== "undefined") {
    /* Node.js */

    var fs = require('fs');
    read_file_async = function (path, cb) {
        return fs.readFile(path, "utf-8", function (error, str) { return cb(str) });
    };
    bye = function () { process.exit(0); };

    var readline = require('readline');
    var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
        terminal: false,
    });
    rl.on('line', function (data) {
        gInputLines.push(data);
        resume("//line");
    });
    put_string = console.log;
} else if (typeof(snarf) !== "undefined") {
    /* old SpiderMonkey shell */

    read_file_async = function (path, cb) {
        try {
            cb(snarf(path, "utf-8"));
        } catch (e) {
            cb();
        }
    };
    read_line = readline;
    this.console = {};
    this.console.log = print;
    bye = function () { quit(0); };
    put_string = this.console.log;
} else if (typeof(readFile) !== "undefined") {
    /* JavaScriptCore */

    read_file_async = function (path, cb) {
        try {
            cb(readFile(path));
        } catch (e) {
            cb();
        }
    };
    read_line = readline;
    if (typeof console === "undefined") {
        this.console = {};
        this.console.log = print;
    }
    bye = function () { quit(); };
    put_string = this.console.log;
} else if (false && typeof(fetch) !== "undefined") {
    /* Web */

    read_file_async = function (path, cb) {
        fetch(path).then(function(x) { return x.text(); }).then(function(str) { return cb(str); }).catch(function (str) { cb() });
    };
    put_string = function (str) {
        forth_output(str + "\n");
    };
} else {
    /* Web */

    read_file_async = function (path, cb) {
        var req = new XMLHttpRequest();
        req.onreadystatechange = function () {
            if (req.readyState == 4 && req.status == 200)
                cb(req.responseText);
            else if (req.readyState == 4)
                cb();
        };
        req.open("GET", path);
        req.send();
    };
    put_string = function (str) {
        forth_output(str + "\n");
    };
}

var heap = new ArrayBuffer(params.memsize);

/* console I/O */

var gLine = "";

function clog(addr) /* unused? */
{
    put_string(CStringAt(HEAP, addr));
}

function foreign_putchar(c)
{
    if (c == 10) {
        put_string(gLine);
        if (gLine.startsWith("Undefined")) {
            var i;
            for (i = 0; i < 4096; i++)
                 console.log(i + ": " + HEAP[i]);
        }
        gLine = "";
    } else {
        gLine += String.fromCharCode(c);
    }
}

/* Library functions */

function CStringTo(str, heap, offset)
{
    var i0;

    for (i0 = 0; i0 < str.length; i0++) {
        heap[offset + i0] = str.charCodeAt(i0);
    }

    heap[offset + i0] = 0;

    return i0+1;
}

function CStringAt(heap, offset)
{
    var ret = '';

    for (var i0 = offset; heap[i0]; i0++) {
        ret += String.fromCharCode(heap[i0]);
    }

    return ret;
}

function StringAt(heap, offset, length)
{
    var ret = '';

    for (var i0 = offset; length--; i0++) {
        ret += String.fromCharCode(heap[i0]);
    }

    return ret;
}

var startDate = new Date();

function foreign_bye(c)
{
    bye();
}

function foreign_dump(c)
{
    var s = "";
    for (var i = 0; i < (params.memsize + 3) / 4; i++) {
        if (HEAP[i])
            s += "HEAP["+i+"] = 0x"+HEAP[i].toString(16)+";\n";
    }
    put_string(s);
}

var loaded = {};
var load_address = {};
var next_load_address = params.fsoff;
var load_size = {};

function load_file(heapu8, path)
{
    var str;
    var succ;
    read_file_async(path, function (str) {
        if (str === undefined || str === null) {
            loaded[path] = 1;
            resume(path);
            return;
        }

        next_load_address += 31;
        next_load_address &= -32;
        load_size[path] = CStringTo(str, heapu8, next_load_address + 32);
        load_address[path] = next_load_address;;
        HEAP[next_load_address+4] = 0; // position
        HEAP[next_load_address+8] = load_size[path]-1; // size
        HEAP[next_load_address+12] = 1; // call slow_read flag
        next_load_address += 32 + load_size[path];

        succ = true;
        loaded[path] = 1;
        resume(path);
    });

    if (succ)
        return true;

    resume_string = path;
    return;
}

var fhs = {}; /* file handles */

function foreign_open_file(addr, u, mode)
{
    var path = StringAt(addr.o, addr.i, u);
    //var mode = CStringAt(mode.o, mode.i);

    var fileid = 0;

    if (!loaded[path]) {
        loaded[path] = .5;

        load_file(HEAP, path);
    }
    if (loaded[path] == .5) {
        resume_string = path;
        return -2;
    }

    if (path in load_address) {
        fileid = load_address[path];
        fhs[fileid] = { offset: 0 };
        HEAP[load_address[path]+4] = 0; // reset position.
    }

    return fileid;
}

function foreign_read_file(addr, u1, fileid)
{
    var i;

    if (fileid instanceof Reference)
        fileid = fileid.i;

    if (fileid === 0 && (!fhs[fileid] || HEAP[fhs[fileid].offset + 32] === 0)) {
       fhs[0] = { offset: 1023 * 1024 };
       for (var i = 0; i < 1024; i++)
           HEAP[1023 * 1024 + i] = 0;
       var str;
       do {
           if (gInputLines.length)
               str = gInputLines.shift();
           else {
               if (read_line)
                   str = read_line();
               else {
                   resume_string = "//line";
                   return -2;
               }
           }
       } while (str === "");

       if (!str)
          foreign_bye(0);
       var len = CStringTo(str, HEAP, fhs[0].offset + 32);
       HEAP[1024 * 1023 + 32 + len - 1] = "\n".charCodeAt(0);
       HEAP[1024 * 1023 + 32 + len] = 0;
    }
    var off = fhs[fileid].offset;

    for (i = 0; i < u1; i++) {
        if ((addr.o[addr.i + i] = HEAP[fileid + off + 32 + i]) == 0)
           break;
    }

    fhs[fileid].offset += i;
    return i;
}

function lbForth(stdlib, foreign, buffer)
{
    "use asm";
    var imul = stdlib.Math.imul;
    var add = function (a, b)
    {
        //console.log("add " + a + " " + b);

        if (a instanceof Reference)
            return a.add(b);
        else if (b instanceof Reference) {
            //console.log("-> " + b.add(a));

            return b.add(a);
        }

        return (a|0)+(b|0);
    };
    var sub = function (a, b)
    {
        //console.log("add " + a + " " + b);

        if ((a instanceof Reference) && (b instanceof Reference))
            return a.i - b.i;
        else if (a instanceof Reference)
            return a.i - b;
        else if (b instanceof Reference)
            return a - b.i;
        else
            return (a|0) - (b|0);
    };

    var deref = function (r, o)
    {
        if (r instanceof Reference)
            return r.o[r.i+o];
        else
            return (HEAP[r + o]);
    };
    var foreign_putchar = foreign.putchar;
    var foreign_open_file = foreign.open_file;
    var foreign_read_file = foreign.read_file;
    var foreign_bye = foreign.bye;
    var foreign_dump = foreign.dump;

function asmmain(word, IP, SP, RP)
{
    word = word;
    IP = IP;
    SP = SP;
    RP = RP;
    var H = HEAP;

    var f = [
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    IP = H[RP];
    RP = RP+1;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP-1;
    H[SP] = SP+1;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP-1;
    H[SP] = RP;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    RP = top;
    SP = SP+1;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP-1;
    H[SP] = add(word, 5);
    RP = RP-1;
    H[RP] = IP;
    IP = deref(word, 3);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    RP = RP-1;
    H[RP] = IP;
    IP = add(word, 5);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP-1;
    H[SP] = add(word, 5);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP-1;
    H[SP] = deref(word, 5);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    word = deref(word, 5);
    RP = RP-1;
    H[RP] = IP;
    IP = new Reference([0, word, 1024], 1);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    //console.log("0branch " + top);
    addr = deref(IP, 0);
    SP = SP+1;
    if (top instanceof Reference)
      IP = add(IP, 1);
    else if (top == 0)
      IP = addr;
    else
      IP = add(IP, 1);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    IP = deref(IP, 0);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP-1;
    H[SP] = deref(IP, 0);
    IP = add(IP, 1);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    x = H[SP];
    SP = SP+1;
    if (top instanceof Reference)
        top.o[top.i] = x;
    else
        H[top] = x;
    //console.log("! " + top + " " + x);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    if (top instanceof Reference)
        H[SP] = top.o[top.i];
    else
        H[SP] = H[top];
    //console.log("@ " + top + " " + H[SP]);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    H[SP] = add(H[SP], top);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP + 1;
    H[SP] = H[SP] + top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = sub(0, top);
    //console.log("negate " + top + " = " + H[SP]);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    H[SP] = sub(H[SP], top);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    RP = RP - 1;
    H[RP] = top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    x = H[RP];
    RP = RP+1;
    SP = SP-1;
    H[SP] = x;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    x = H[RP];
    RP = RP+1;
    y = H[RP];
    RP = RP+1;
    SP = SP-1;
    H[SP] = y;
    SP = SP-1;
    H[SP] = x;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    y = H[SP];
    SP = SP+1;
    RP = RP-1;
    H[RP] = y;
    RP = RP-1;
    H[RP] = top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    x = H[SP];
    SP = SP+1;
    if (top instanceof Reference)
        top.o[top.i] = x;
    else
        H[top] = x;
    //console.log("c! " + top + " " + c);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    if (top instanceof Reference)
        H[SP] = top.o[top.i]&255;
    else
        H[SP] = H[top]&255;
    //console.log("c@ " + top + " " + H[SP]);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    ////console.log("loop " + H[RP] + " " + H[RP+1]);

    H[RP] = add(H[RP], 1);
    SP = SP-1;
    if ((H[RP] instanceof Reference) &&
             H[RP].i >= H[RP+1].i)
        H[SP] = -1;
    else if (H[RP] instanceof Reference)
        H[SP] = 0;
    else if (H[RP] >= H[RP+1])
        H[SP] = -1;
    else
        H[SP] = 0;
    ////console.log("loop " + H[SP]);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    RP = RP+2;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    foreign_putchar (top);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP-1;
    H[SP] = top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    var c;
    ////console.log("0= " + top);
    if (top instanceof Reference)
        c = (top.i == 0) ? -1 : 0;
    else if ((top) == 0)
        c = -1;
    else
        c = 0;
    H[SP] = c;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    var c;
    ////console.log("0<> " + top);
    if (top instanceof Reference)
        c = (top.i != 0) ? -1 : 0;
    else if ((top) == 0)
        c = 0;
    else
        c = -1;
    H[SP] = c;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    var c;
    ////console.log("0< " + top);
    if (top instanceof Reference)
        c = (top.i < 0) ? -1 : 0;
    else if (0 > (top))
        c = -1;
    else
        c = 0;
    H[SP] = c;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    var c;
    SP = SP+1;
    ////console.log("< " + top + " " + H[SP]);
    if (top instanceof Reference)
        c = (top.i > H[SP].i) ? -1 : 0;
    else if ((top>>0) > (H[SP]>>0))
        c = -1;
    else
        c = 0;
    H[SP] = c;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = H[SP+2];
    H[SP+2] = H[SP+1];
    H[SP+1] = top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = H[SP+1];
    H[SP+1] = H[SP+2];
    H[SP+2] = top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    H[SP] = top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP=SP-2;
    H[SP+1] = H[SP+3];
    H[SP] = top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    if (top) {
        SP = SP-1;
        H[SP] = top;
    }
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = H[SP+1];
    H[SP+1] = top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP-1;
    H[SP] = H[SP+2];
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    ////console.log("invert " + top);
    H[SP] = ~(top);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP=SP+1;
    H[SP] = H[SP]^top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP=SP+1;
    H[SP] = H[SP]|top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP=SP+1;
    H[SP] = H[SP]&top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP=SP+1;
    ////console.log("nand " + top + " " + H[SP]);
    H[SP] = ~(H[SP]&top);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP=SP+1;
    ////console.log("= " + top + " " + H[SP]);
    if ((top instanceof Reference) &&
        H[SP].i == top.i)
        H[SP] = -1;
    else
        H[SP] = ((H[SP]) == (top)) ? -1 : 0;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP=SP+1;
    ////console.log("<> " + top + " " + H[SP]);
    if ((top instanceof Reference) &&
        H[SP].i == top.i)
        H[SP] = 0;
    else
        H[SP] = ((H[SP]) != (top)) ? -1 : 0;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = add(top, 1);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = add(top, top);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP=SP+1;
    H[SP] = imul(top, H[SP]);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP=SP-1;
    H[SP+1] = H[SP+2];
    H[SP+2] = top;
    H[SP] = top;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    foreign_bye(0);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = 0;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    var c;
    SP = SP+1;
    y = H[SP];
    SP = SP+1;
    c = H[SP];
    SP = SP+1;

    if (!(c instanceof Reference))
        c = new Reference(H, c);

    //console.log("open-file " + c + z + addr + x );

    addr = foreign_open_file(c, y, top);
    if ((addr) == -2) {
        SP = SP-4;
        H[SP] = IP;
        SP = SP-1;
        H[SP] = RP;
        SP = SP-1;
        H[SP] = word;

        return SP;
    }
    SP = SP-1;
    H[SP] = addr;
    SP = SP-1;
    if ((addr) == 0)
        H[SP] = 1;
    else
        H[SP] = 0;
    //console.log("read-file " + H[SP]);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    var c;
    c = H[SP];
    SP = SP+1;
    z = H[SP];
    SP = SP+1;
    addr = H[SP];
    SP = SP+1;

    //console.log("read-file " + addr + " " + z + " " + c + " -> " + i);
    if (!(c instanceof Reference))
        c = new Reference(H, c);
    if (!(addr instanceof Reference))
        addr = new Reference(H, addr);

    x = c.o[c.i+8];
    y = c.o[c.i+4];

    if ((x) == (y)) {
        if ((c.o[c.i+12]) != 0)
            i = 0;
        else
            i = foreign_read_file(addr, z, c);
        if ((i) == -2) {
            SP = SP-4;
            H[SP] = IP;
            SP = SP-1;
            H[SP] = RP;
            SP = SP-1;
            H[SP] = word;

            return SP;
        }
    } else {
        if ((z>>>0) > ((x-y)>>>0))
            z = (x-y);
        for (i = 0; (i>>>0) < (z>>>0); i = (i+1)) {
            addr.o[addr.i+i] = c.o[c.i+32+y+i];
        }
        c.o[c.i+4] = y + i;
    }

    SP = SP-1;
    H[SP] = i;
    //console.log("read-file " + addr + " " + z + " " + c + " -> " + i);
    SP = SP-1;
    H[SP] = 0;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP-1;
    H[SP] = [];
    for (var i = 0; i < 32; i++) H[i] = 0;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    //console.log(top + "(" + typeof(top) + ")");
    //console.log(H[SP] + "(" + typeof(H[SP]) + ")");
    H[SP] = ((typeof(H[SP]) === "object") && (top in H[SP])) ? -1 : 0;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP-1;
    H[SP] = {};
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    H[SP] = new Reference(H[SP], top);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = top.o;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = top.i;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    console.log(top); // + "(" + typeof(top) + ")");
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    if (typeof top === "number")
        console.log(top);
    else if (typeof top === "string")
        console.log("\"" + top.replace(/\"/g, "\\\"") + "\"");
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    H[SP][top] = H[SP+1];
    SP = SP+2;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    H[SP] = H[SP][top];
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = top.length;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = top.length;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = top[0];
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = top[top.length-1];
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = top[top.length-1];
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    while (top.length > H[SP])
        top.pop();
    SP = SP+1;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    while (top.length > H[SP])
        top.pop();
    SP = SP+1;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    top.push(H[SP]);
    SP = SP+1;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    var res = [];
    for (var prop in top)
        res.push(prop);
    H[SP] = res;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    var res = [];
    for (var prop of top)
        res.push(prop);
    H[SP] = res;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = top.pop();
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    H[SP] = top.shift();
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    top.push(H[SP]);
    SP = SP+1;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    top.unshift(H[SP]);
    SP = SP+1;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    H[SP] = new Reference(H[SP], top);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP+1;
    H[SP] = new Reference(H[SP], top);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    var ret = "";
    SP = SP+1;
    if (!(H[SP] instanceof Reference))
        H[SP] = new Reference(H, H[SP]);
    for (var i = 0; i < top; i++)
        ret += String.fromCharCode(H[SP].o[H[SP].i + i]);
    H[SP] = ret;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    if (typeof(top) === "number" && top !== 0) {
        var i = 0;
        for (i = 0; i < 64; i++)
            console.log("rstk " + i + " = " + H[RP+i]);
        for (i = 0; i < 4096; i++)
            console.log(i + ": " + HEAP[i]);
        for (i = 65536; i < 65536 + 4096; i++)
            console.log(i + ": " + HEAP[i]);
        console.log("forthifying " + top + typeof(top));
    }
    H[SP] = [];
    for (var i = 0; i < top.length; i++)
        H[SP][i+1] = top.charCodeAt(i);
    H[SP] = new Reference(H[SP], 1);
    SP = SP-1;
    H[SP] = top.length || 0;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP - 1;
    H[SP] = [];
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP - 1;
    H[SP] = {};
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    var args = [];

    for (i = 0; i < top; i++)
        args.push(H[SP+top-i]);

    SP += top + 1;

    //console.log(H[SP] + "(" + typeof(H[SP]) + ")");
    //console.log(args + "(" + typeof(args) + ")");
    H[SP] = H[SP].apply(undefined, args);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    var args = [];

    for (i = 0; i < top; i++)
        args.push(H[SP+top-i]);

    SP += top + 1;

    //console.log(H[SP] + "(" + typeof(H[SP]) + ")");
    //console.log(args + "(" + typeof(args) + ")");
    var t = args.shift();
    H[SP] = H[SP].apply(t, args);
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP + 1;
    for (i = H[SP].length - 1; i >= 0; i--) {
        if (H[SP][i].hasOwnProperty(top))
            break;
     }
     H[SP] = i;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP - 1;
    H[SP] = global;
},
() => {
var addr = 0;
var x = 0;
var y = 0;
var z = 0;
var i = 0;
var top = HEAP[SP];
    SP = SP + 1;
    //console.log(H[SP] + typeof(H[SP]) + "===" + top + typeof(top) + "?" + (H[SP] === top));
    if (H[SP] === top)
        H[SP] = -1;
    else
        H[SP] = 0;
},
    ];

    var start = Date.now();
    while (1) {
        f[deref(word,4)|0]();
        word = deref(IP, 0);
        IP = add(IP, 1);
    }

    return 0;
}

    return { asmmain: asmmain };
}

var asmmodule;
var global_sp;

function run(turnkey)
{
    asmmodule = lbForth({
            Uint8Array: Uint8Array,
            Uint32Array: Uint32Array,
            Math: {
                imul: Math.imul || function(a, b) {
                    var ah = (a >>> 16) & 0xffff;
                    var al = a & 0xffff;
                    var bh = (b >>> 16) & 0xffff;
                    var bl = b & 0xffff;
                    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
                }
            }
        }, {
            clog: clog,
            putchar: foreign_putchar,
            open_file: foreign_open_file,
            read_file: foreign_read_file,
            bye: foreign_bye,
            dump: foreign_dump
        }, heap);

    //try {
        return global_sp = asmmodule.asmmain(turnkey,
        new Reference(HEAP, 0), params.sp0, params.rp0);
    //} catch (e) {
    //    put_string(e);
    //}
}

function resume(str)
{
    if (str !== resume_string)
        return;

    if (str === undefined)
        return;

    resume_string = undefined;

    var sp = global_sp;
    if (!global_sp)
        return;

    var word = HEAP[sp];
    sp += 1;
    var RP = HEAP[sp];
    sp += 1;
    var IP = HEAP[sp];
    sp += 1;
    var SP = sp;

    try {
        global_sp = 0;
        global_sp = asmmodule.asmmain(word, IP, SP, RP);
    } catch (e) {
        put_string(e);
    }
}
HEAP[3127 +5] = 3623 ;
HEAP[3115 +5] = params.sp0;
HEAP[3097 +5] = params.sp0;
HEAP[3103 +5] = params.rp0;
HEAP[3109 +5] = 64 * 1024;
run(3623 );
for (var i = 0; i < 64*1024; i++) DICT[i] = 0;
